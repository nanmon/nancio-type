{"version":3,"sources":["util/std.js","util/text.js","util/state.js","components/TypingText.js","components/Stats.js","components/Typer.js","App.js","reportWebVitals.js","index.js"],"names":["clamp","min","max","val","last","array","length","tuplify","firstItems","arrays","map","first","index","arr","words","text","split","filter","w","chars","extra","typed","substr","getTextWidth","font","fontSize","context","document","createElement","getContext","measureText","width","StateContext","React","createContext","DispatchContext","TyperProvider","firstContent","children","useReducer","reducer","init","state","dispatch","Provider","value","useTyper","useContext","content","screen","stats","count","prevCount","wpm","errors","config","lineHeight","colors","left","correct","wrong","caret","action","type","char","endsWith","Number","didErr","k","delta","wordsTyped","lastWord","actualWord","TypingText","fn","onType","inputRef","useRef","useState","inputHasFocus","setInputFocus","capslock","setCapslock","useEffect","current","focus","lines","useMemo","wordsToLineToken","wordTokens","join","currentLine","forEach","wordToken","push","lineStr","pop","findIndex","line","x","lastTypedLine","typedWords","textWords","textUntilCaret","wtext","wtyped","withExtra","slice","textY","clamper","offset","ref","onKeyDown","e","preventDefault","getModifierState","onKeyUp","style","height","padding","border","onFocus","onBlur","onClick","fontFamily","y","Line","isCurrent","Caret","addSpaces","_b","_a","befores","afters","res","before","after","flat","_words","lastWordIndex","className","dy","word","Word","_chars","extraStr","redline","textDecoration","fill","Char","color","code","str","setClassName","timeoutId","setTimeout","clearTimeout","transform","Stats","acc","counts","incorrect","missing","extras","chtext","chtyped","charCounts","reduce","s","v","title","Typer","nextContent","onNext","allWords","lastTyped","doneTyping","intervalId","setInterval","clearInterval","key","quotes","require","App","randomQuote","Math","floor","random","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.474a9e02.chunk.js","sourcesContent":["export const clamp = (min, max) => val => {\n  if (val < min) return min;\n  if (val > max) return max;\n  return val;\n}\n\nexport const compose = (...fns) => arg => {\n  return fns.reduce((acc, fn) => fn(acc), arg)\n}\n\nexport const last = array => {\n  return array[array.length - 1];\n}\n\nexport const fillBetween = fn => array => {\n  const befores = array.slice(0, array.length - 1);\n  const afters = array.slice(1);\n\n  const res = tuplify(befores, afters)\n    .map(([before, after], index) => [before, fn(before, after, index)])\n    .flat();\n  res.push(last(array));\n  return res;\n}\n\nexport const tuplify = (firstItems, ...arrays) => {\n  return firstItems.map((first, index) => {\n    return [\n      first, \n      ...arrays.map(arr => arr[index])\n    ];\n  });\n}\n\nexport const memoize = (fn, stackSize = 15) => {\n  const memory = {};\n  const keyStack = [];\n  return (...args) => {\n    const key = JSON.stringify(args);\n    if (!memory[key]) \n      memory[key] = fn(...args);\n    \n    // key cache\n    const keyIndex = keyStack.indexOf(key);\n    if (keyIndex !== -1) keyStack.splice(keyIndex, 1);\n    else if (keyStack.length >= stackSize) {\n      const oldKey = keyStack.shift();\n      delete memory[oldKey];\n    }\n    keyStack.push(key);\n\n    return memory[key];\n  }\n}","import { tuplify } from './std'\n\nexport const words = (text = '') => {\n  return text.split(' ').filter(w => w);\n}\n\nexport const chars = (text = '') => {\n  return text.split('');\n}\n\nexport const extra = text => (typed = '') => {\n  if (typed.length > text.length)\n    return typed.substr(text.length);\n  return '';\n}\n\nexport const withExtra = (text, typed) => {\n  const wtext = words(text);\n  const wtyped = words(typed);\n  return tuplify(wtext, wtyped).map(([text, typed]) => {\n    return text + extra(text)(typed);\n  }).join(' ');\n}\n\nexport const getTextWidth = (text, {font, fontSize}) => {\n  const canvas = document.createElement(\"canvas\");\n  const context = canvas.getContext(\"2d\");\n  context.font = `${fontSize}px ${font}`;\n  return context.measureText(text).width;\n}","import React from 'react';\n\nconst StateContext = React.createContext();\nconst DispatchContext = React.createContext();\n\nexport function TyperProvider({ firstContent, children }) {\n  const [state, dispatch] = React.useReducer(reducer, null, () => init(firstContent()));\n  return (\n    <DispatchContext.Provider value={dispatch}>\n      <StateContext.Provider value={state}>\n        {children}\n      </StateContext.Provider>\n    </DispatchContext.Provider>\n  );\n}\n\nexport function useTyper() {\n  return React.useContext(StateContext);\n}\n\nexport function useTyperDispatch() {\n  return React.useContext(DispatchContext);\n}\n\nfunction init(content = {text: ''}) {\n  return {\n    content,\n    typed: '',\n    screen: 'typing',\n    stats: {\n      count: 0, prevCount: 0, wpm: [], errors: 0\n    },\n    config: {\n      font: 'monospace',\n      fontSize: 24,\n      lineHeight: 30,\n      width: 800, \n      colors: {\n        left: 'gray',\n        correct: 'white',\n        wrong: 'red',\n        extra: 'darkred',\n        caret: 'cyan'\n      }\n    }\n  }\n}\n\nfunction reducer(state, action) {\n  switch(action.type) {\n    case 'typing':\n      let { typed } = state;\n      if (action.char === 'Backspace')\n        typed = typed.substr(0, typed.length - 1)\n      else if(action.char === ' ' && typed.endsWith(' ')){\n        // dont add space if space already there\n      } else typed = typed + action.char\n      return {  \n        ...state,\n        typed,\n        stats: {\n          ...state.stats,\n          count: state.stats.count + 1,\n          errors: state.stats.errors + Number(didErr(typed, state.content))\n        }\n      }\n    case 'interval':\n      if (state.stats.count === 0) return state;\n      const k = action.delta / 60 * 5; //transform to wpm\n      return {\n        ...state,\n        stats: {\n          ...state.stats,\n          prevCount: state.stats.count,\n          wpm: [\n            ...state.stats.wpm,\n            (state.stats.count - state.stats.prevCount) / k\n          ]\n        }\n      }\n    case 'restart': return init(action.content);\n    case 'screen': \n      return {\n        ...state,\n        screen: action.screen\n      }\n    default: return state;\n  }\n}\n\n\nfunction didErr(typed, {text}) {\n  if (typed.endsWith(' ')) return false;\n  const wordsTyped = typed.split(' ');\n  const lastWord = wordsTyped[wordsTyped.length - 1];\n  const actualWord = text.split(' ')[wordsTyped.length - 1];\n  return !!actualWord && actualWord[lastWord.length - 1] !== lastWord[lastWord.length - 1];\n}","import React from 'react';\nimport { clamp, fillBetween, last, tuplify } from '../util/std';\nimport { chars, extra, getTextWidth, withExtra, words } from '../util/text'\nimport { useTyper } from '../util/state'\n\nfunction TypingText({ onType }) {\n  const { content, typed, config } = useTyper();\n\n  const inputRef = React.useRef();\n  const [inputHasFocus, setInputFocus] = React.useState(false);\n  const [capslock, setCapslock] = React.useState(false);\n\n  React.useEffect(() => {\n    inputRef.current.focus();\n  }, [content.text]);\n\n  const lines = React.useMemo(() => {\n    function wordsToLineToken(wordTokens) {\n      return {\n        text: wordTokens.map(w => w.text).join(' '),\n        typed: wordTokens\n          .map(w => w.typed)\n          .filter(w => w)\n          .join(' '),\n      }\n    }\n\n    const lines = [];\n    let currentLine = [];\n    tuplify(\n      words(content.text),\n      words(typed),\n    ).forEach(([woriginal, wtyped]) => {\n      const wordToken = {\n        text: woriginal,\n        typed: wtyped,\n      }\n      currentLine.push(wordToken);\n      const lineStr = currentLine\n        .map(w => w.text + extra(w.text)(w.typed))\n        .join(' ');\n      const width = getTextWidth(lineStr, config);\n      if (width > config.width) {\n        currentLine.pop();\n        lines.push(wordsToLineToken(currentLine));\n        currentLine = [wordToken];\n      }\n    });\n    lines.push(wordsToLineToken(currentLine));\n    return lines;\n  }, [content.text, typed, config]);\n\n  const caret = React.useMemo(() => {\n    let index = lines.findIndex(line => !line.typed) - 1;\n    if (index === -1) {\n      // not started typing\n      return { line: 0, x: 0};\n    }\n    if (index === -2) {\n      // all lines have text\n      index = lines.length - 1;\n    }\n    const lastTypedLine = lines[index];\n    const typedWords = words(lastTypedLine.typed);\n    const textWords = words(lastTypedLine.text);\n    if (typedWords.length === textWords.length) {\n      // completed this line but not started the next one\n      if (typed.endsWith(' ')) return { line: index + 1, x: 0}\n    }\n    let textUntilCaret = withExtra(\n      textWords.slice(0, typedWords.length - 1).join(' '), \n      typedWords.slice(0, typedWords.length - 1).join(' ')\n    );\n    if (textUntilCaret) textUntilCaret += ' ';\n    if (typed.endsWith(' ')) {\n      const wtext = textWords[typedWords.length - 1];\n      textUntilCaret += wtext\n        + extra(wtext)(last(typedWords))\n        + ' ';\n    } else textUntilCaret += last(typedWords);\n    return { line: index, x: getTextWidth(textUntilCaret, config) };\n  }, [lines, config, typed]);\n\n  function onKeyPress(e) {\n    const prevent = onType(e);\n    if (prevent) e.preventDefault();\n    setCapslock(e.getModifierState('CapsLock'))\n  }\n\n  function capslockDetector(e) {\n    setCapslock(e.getModifierState('CapsLock'))\n  }\n\n  const textY = React.useMemo(() => {\n    const clamper = clamp(-1e20, 0);\n    const offset = config.lineHeight - config.fontSize;\n    return clamper(-(caret.line - 1) * config.lineHeight) - offset;\n  }, [config, caret]);\n\n  return (\n    <>\n      <input \n        ref={inputRef}\n        onKeyDown={onKeyPress}\n        onKeyUp={capslockDetector}\n        style={{height: 0, padding: 0, border: 0}}\n        onFocus={() => setInputFocus(true)}\n        onBlur={() => setInputFocus(false)}\n      />\n      {capslock && <p>CAPSLOCK IS ACTIVE</p>}\n      <svg width={config.width} height={config.lineHeight * 3} onClick={() => inputRef.current.focus()}>\n        <text fontFamily={config.font} fontSize={config.fontSize} y={textY}>\n          {lines.map((line, index) => \n            <Line \n              key={index} \n              lineHeight={config.lineHeight}\n              isCurrent={caret.line === index}\n              {...line}\n            />\n          )}\n        </text>\n        {inputHasFocus && <Caret {...caret}/>}\n      </svg>\n    </>\n  )\n}\n\nexport default TypingText;\n\nconst addSpaces = fillBetween((_b, _a, index) => <tspan key={'space-'+index}>{\" \"}</tspan>);\nfunction Line({ text, typed, lineHeight, isCurrent }) {\n  const typedWords = words(typed);\n  const _words = tuplify(\n    words(text),\n   typedWords,\n  ).map(([text, typed]) => ({text, typed}));\n  const lastWordIndex = isCurrent ? typedWords.length - 1 : -1;\n  return (\n    <tspan className=\"line\" dy={lineHeight} x={0}>\n      {addSpaces(_words.map((word, index) => \n        <Word \n          key={index} \n          isCurrent={lastWordIndex === index}\n          {...word}\n        />\n      ))}\n    </tspan>\n  );\n}\n\n\nfunction Word({ text, typed, isCurrent }) {\n  const _chars = tuplify(\n    chars(text),\n    chars(typed)\n  ).map(([text, typed]) => ({ text, typed }));\n  const extraStr = extra(text)(typed);\n  chars(extraStr).forEach(char => {\n    _chars.push({ typed: char });\n  });\n  const redline = !isCurrent && typed && text !== typed;\n  return (\n    <tspan className=\"Word\" textDecoration={redline ? 'underline solid red' : null} fill=\"red\">\n      {_chars.map((char, index) => <Char key={index} {...char}/>)}\n    </tspan>\n  );\n}\n\nfunction Char({ text, typed }) {\n  const { config } = useTyper();\n  const color = React.useMemo(() => {\n    let code;\n    if (!typed) code = 'left';\n    else if (!text) code = 'extra';\n    else if (typed === text) code = 'correct';\n    else code = 'wrong';\n    return config.colors[code]\n  }, [text, typed, config]);\n  const str = text || typed;\n  return (\n    <tspan className=\"Char\" fill={color}>{str}</tspan>\n  );\n}\n\nfunction Caret({ line, x }) {\n  const { config, typed } = useTyper();\n  const [className, setClassName] = React.useState('caret');\n\n  React.useEffect(() => {\n    setClassName('caret');\n    const timeoutId = setTimeout(() => {\n      setClassName('caret animated');\n    }, 500);\n    return () => clearTimeout(timeoutId);\n  }, [typed]);\n\n  const y = React.useMemo(() => {\n    const offset = config.lineHeight - config.fontSize;\n    const clamper = clamp(config.lineHeight, config.lineHeight * 2);\n    return clamper((line + 1) * config.lineHeight) - offset;\n  }, [line, config]);\n\n  return (\n    <text \n      className={className}\n      fontFamily={config.font}\n      fontSize={config.fontSize} \n      transform={`translate(${x}, ${y})`}\n    >\n      <tspan y=\"0\" x={-6} fill={config.colors.caret}>|</tspan>\n    </text>\n  );\n} \n","import React from 'react';\nimport { tuplify } from '../util/std';\nimport { chars, words, extra } from '../util/text';\n\n\nfunction Stats({ state }) {\n  const { stats, content, typed } = state;\n  const acc = (1 - stats.errors / content.text.length) * 100\n  const counts = charCounts(content.text, typed);\n  return (\n    <>\n      <p>Avg: {avg(stats.wpm)} wpm</p>\n      <p>Time: {stats.wpm.length}s </p>\n      <p>Acc: {acc}%</p>\n      <p title=\"correct/incorrect/extra/missing\">Chars: {counts.correct}/{counts.incorrect}/{counts.extra}/{counts.missing}</p>\n    </>\n  )\n}\n\nexport default Stats;\n\nfunction avg(array) {\n  return array.reduce((s, v) => s + v, 0) / array.length;\n}\n\nfunction charCounts(text, typed) {\n  let correct = 0, incorrect = 0, missing = 0, extras = 0\n  tuplify(\n    words(text),\n    words(typed)\n  ).forEach(([wtext, wtyped]) => {\n    tuplify(\n      chars(wtext),\n      chars(wtyped)\n    ).forEach(([chtext, chtyped]) => {\n      if (!chtyped) missing++;\n      else if (chtext === chtyped) correct++;\n      else incorrect++;\n    });\n    chars(extra(wtext)(wtyped)).forEach(() => extras++);\n  })\n  return {correct, incorrect, missing, extra: extras }\n}","\nimport React from 'react';\nimport TypingText from './TypingText';\nimport Stats from './Stats';\nimport { useTyper, useTyperDispatch } from '../util/state';\n\nfunction Typer({ nextContent }) {\n\n  const [state, dispatch] = [useTyper(), useTyperDispatch()];\n\n  React.useEffect(() => {\n    if (state.screen === 'typing' &&  doneTyping(state)) {\n      dispatch({ type: 'screen', screen: 'stats' });\n    }\n  }, [state, dispatch]);\n\n  React.useEffect(() => {\n    if (state.screen !== 'typing') return;\n    const intervalId = setInterval(() => {\n      dispatch({ type: 'interval', delta: 1 });\n    }, 1000);\n    return () => clearInterval(intervalId);\n  }, [state.screen, dispatch]);\n  \n  function onType(e) {\n    const char = e.key;\n    if (char.length === 1 || char === 'Backspace') {\n      dispatch({ type: 'typing', char });\n      return true;\n    }\n    return false;\n  }\n\n  function onNext() {\n    dispatch({ type: 'restart', content: nextContent() })\n  }\n\n  return (\n    <>\n      {state.screen === 'stats' \n        ? <Stats state={state} onNext={onNext}/>\n        : <TypingText\n            onType={onType}\n          />\n      }\n      <button onClick={onNext}>Next</button>\n    </>\n  );\n}\n\nexport default Typer;\n\nfunction doneTyping({typed, content}) {\n  const typedWords = typed.split(' ').filter(w => w);\n  const allWords = content.text.split(' ');\n  if (typedWords.length < allWords.length) return false;\n  if (typed.endsWith(' ')) return true;\n  const lastTyped = typedWords.pop();\n  const lastWord = allWords.pop();\n  return lastTyped === lastWord;\n}","import React from 'react';\nimport './App.css';\nimport Typer from './components/Typer';\nimport { TyperProvider } from './util/state';\nconst { quotes } = require('./quotes.json')\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <TyperProvider firstContent={randomQuote}>\n          <Typer nextContent={randomQuote}/>\n        </TyperProvider>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n\n\nfunction randomQuote() {\n  const index = Math.floor(Math.random() * quotes.length);\n  return quotes[index]\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}